<?php
/**
 * [应用程序：初始化应用框架]
 *
 *      1. 构造函数中【注册基本绑定】到容器共享实例数组中：绑定自身到app 抽象；绑定自身到从容器类抽象
 *      2. 构造函数中【注册基本服务】到容器绑定数组中：包含但不限于：路由对象、请求对象、日志契约接口到文件日志实现类、文件日志服务对象、mysql日志服务对象...
 *
 * @Author  leeprince:2020-03-11 23:23
 */
class Application extends Container
{
    public function __construct()
    {
        $this->registerBaseBindings();
        $this->registerBaseService();
    }

    /**
     * [注册应用运行需要的基础绑定: 设置自身实例及绑定共享实例]
     *
     * @Author  leeprince:2020-03-12 01:25
     */
    public function registerBaseBindings()
    {
        static::setInstance($this);

        $this->instance('app', $this);
        $this->instance(Container::class, $this);
    }

    /**
     * [注册应用运行需要的基础服务]
     *
     * @Author  leeprince:2020-03-12 01:25
     * @throws Exception
     */
    public function registerBaseService()
    {
        $bind = [
            LogContracts::class => FileLog::class,  // 绑定接口到实现
            FileLog::class => FileLog::class,
            MysqlLog::class =>  MysqlLog::class,
            'route' => Route::class,
            'request' => Request::class
        ];
        foreach($bind as $key => $value) {
            $this->bind($key, $value);
        }
    }
    
    /**
     * [从容器中创建实例]
     *
     * @Author  leeprince:2020-03-12 01:53
     * @param $abstract
     * @param array $parameter
     * @return mixed
     * @throws Exception
     */
    public function make($abstract, $parameter = [])
    {
        if (! $this->has($abstract)) {
            throw new Exception('该抽象并未绑定到容器中 - '.$abstract);
        }
        
        return parent::make($abstract, $parameter); // TODO: Change the autogenerated stub
    }
}