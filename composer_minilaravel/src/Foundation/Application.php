<?php
/**
 * [应用程序]
 *
 * @Author  leeprince:2020-03-11 23:23
 */

namespace Minilaravel\Foundation;

use Minilaravel\Container\Container;
use Exception;
use Minilaravel\Contracts\Log\LogContracts;
use Minilaravel\Log\File\FileLog;
use Minilaravel\Log\Mysql\MysqlLog;
use Minilaravel\Route\Route;
use Minilaravel\Request\Request;

class Application extends Container
{
    public function __construct()
    {
        $this->registerBaseBindings();
        $this->registerBaseService();
    }
    
    /**
     * [注册应用运行需要的基础绑定: 设置自身实例及绑定共享实例]
     *
     * @Author  leeprince:2020-03-12 01:25
     */
    public function registerBaseBindings()
    {
        static::setInstance($this);
        
        $this->instance('app', $this);
        $this->instance(Container::class, $this);
    }
    
    /**
     * [注册应用运行需要的基础服务]
     *
     * @Author  leeprince:2020-03-19 15:25
     */
    public function registerBaseService()
    {
        $bind = [
            LogContracts::class => FileLog::class,  // 绑定接口到实现
            FileLog::class      => FileLog::class,
            MysqlLog::class     => MysqlLog::class,
            'FileLog'           => FileLog::class,
            'MysqlLog'          => MysqlLog::class,
            'route'             => Route::class,
            'request'           => Request::class
        ];
        foreach($bind as $key => $value) {
            $this->bind($key, $value);
        }
    }
    
    /**
     * [从容器中创建实例]
     *
     * @Author  leeprince:2020-03-12 01:53
     * @param $abstract
     * @param array $parameter
     * @return mixed
     * @throws Exception
     */
    public function make($abstract, $parameter = [])
    {
        if (! $this->has($abstract)) {
            throw new Exception('该抽象并未绑定到容器中 - '.$abstract);
        }
        
        return parent::make($abstract, $parameter); // TODO: Change the autogenerated stub
    }
}